{"version":3,"sources":["Card.js","Cardlist.js","Searchbox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","Cardlist","robots","cardcomponent","map","user","i","Searchbox","searchfield","searchChange","type","placeholder","onChange","username","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAiBgBA,EAbJ,SAACC,GACX,OACA,yBAAKC,UAAU,uDAEd,yBAAKC,IAAI,KAAKC,IAAG,+BAA0BH,EAAMI,GAAhC,aACjB,6BACE,4BAAKJ,EAAMK,MACX,+BAAKL,EAAMM,UCSDC,EAhBA,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACXC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GACpC,OAAO,kBAAC,EAAD,CAAOR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAOC,MAAOE,EAAOI,GAAGN,WAIxE,OACC,6BACEG,ICHWI,EAPC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC7B,OACC,yBAAKd,UAAU,OACd,2BAAOA,UAAU,mCAAmCe,KAAK,SAASC,YAAY,gBAAiBC,SAAUH,MCL/FP,EAAS,CACpB,CACEJ,GAAI,EACJC,KAAM,cACNc,SAAU,SACVb,MAAO,SAET,CACEF,GAAI,EACJC,KAAM,eACNc,SAAU,YACVb,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNc,SAAU,WACVb,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNc,SAAU,WACVb,MAAO,6BAET,CACEF,GAAI,GACJC,KAAM,YACNc,SAAU,QACVb,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNc,SAAU,mBACVb,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNc,SAAU,eACVb,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNc,SAAU,gBACVb,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNc,SAAU,WACVb,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNc,SAAU,iBACVb,MAAO,2BCvBIc,G,wDA5Bd,aAAc,IAAD,8BACX,gBAOFC,eAAe,SAACC,GACd,EAAKC,SAAS,CAACT,YAAaQ,EAAME,OAAOC,SAPzC,EAAKC,MAAM,CACXlB,OAAOA,EACPM,YAAY,IAJD,E,qDAaJ,IAAD,OACAa,EAAeC,KAAKF,MAAMlB,OAAOqB,QAAO,SAAArB,GAC9C,OAAQA,EAAOH,KAAKyB,cAAcC,SAAS,EAAKL,MAAMZ,YAAYgB,kBAGpE,OACC,yBAAK7B,UAAU,MACf,wBAAIA,UAAU,aAAd,eACA,kBAAC,EAAD,CAAWc,aAAca,KAAKP,iBAC9B,kBAAC,EAAD,CAAUb,OAAQmB,S,GAvBFK,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,6BACX,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDwHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a217ebc0.chunk.js","sourcesContent":[" import React from 'react'\r\n \r\n\r\n \r\n const Card=(props)=>{\r\n \treturn(\r\n \t<div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n \t\t<img alt='Hi' src={`https://robohash.org/${props.id}200x200`} />\r\n \t\t<div>\r\n \t \t <h2>{props.name}</h2>\r\n \t \t <p> {props.email}</p> \r\n \t \t</div>\r\n \t </div>\r\n \t \t);\r\n \r\n }\r\n export default Card;","import React from 'react'\r\nimport Card from './Card';\r\n\r\n\r\nconst Cardlist=({robots}) =>{\r\nconst cardcomponent=robots.map((user,i)=>{\r\n\treturn <Card  id={robots[i].id} name={robots[i].name}  email={robots[i].email}/>\r\n\t}\r\n)\r\n\t\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{cardcomponent}\r\n\t\t</div>\r\n\r\n\t\t);\r\n\r\n\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from 'react'\r\n\r\nconst Searchbox=({searchfield,searchChange})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots'  onChange={searchChange}/>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Searchbox;\r\n","export const robots = [\n  {\n    id: 1,\n    name: 'Mumsi momom',\n    username: 'Shelly',\n    email: '@.com'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 11,\n    name: 'Harjinder',\n    username: 'Ghali',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React,{Component} from 'react'\r\nimport Cardlist from './Cardlist'\r\nimport Searchbox from './Searchbox'\r\nimport {robots} from './robots';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\t\tsuper()\r\n\t\t\tthis.state={\r\n\t\t\trobots:robots,\r\n\t\t\tsearchfield:''\r\n\r\n\t\t}\r\n\t}\r\n\tonSearchChange=(event)=>{\r\n\t\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\t\t\r\n\t\t}\r\n\trender(){\r\n\t\t\tconst filteredRobots=this.state.robots.filter(robots=>{\r\n\t\t\treturn (robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()));\r\n\r\n\t\t})\r\n\treturn (\r\n\t\t<div className='tc'>\r\n\t\t<h1 className='f1 indigo'>Robofriends</h1>\r\n\t\t<Searchbox searchChange={this.onSearchChange} />\r\n\t\t<Cardlist robots={filteredRobots}/>\r\n\t\t</div>\r\n\t\t);\r\n\t\t\t}\r\n\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<div>\n\t\t\t\t\t<App/>\n\t\t\t\t</div>\n\t\t\t\t,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}